/* Copyright (c) 2013, Julian Straub <jstraub@csail.mit.edu>
 * Licensed under the GPLv3 license. See the license file LICENSE.
 * 
 * If this code is used, the following should be cited:  
 * [1] Fast Relocalization For Visual Odometry Using Binary Features (J.
 * Straub, S. Hilsenbeck, G. Schroth, R. Huitl, A. Moeller, E. Steinbach), In 
 * IEEE International Conference on Image Processing (ICIP), 2013 
 */
 #define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE testBRIEF
#include <boost/test/unit_test.hpp>

#include <timer.hpp>
#include <MapPoint.h>
#include <BriefData.hpp>
#include <Ransac.hpp>
#include <ATANCamera.h>
#include <association.hpp>

#include <gvars3/instances.h>

#include <stdio.h>
#include <iostream>

using namespace std;
using namespace TooN;
using namespace GVars3;

#define PROSAC

BOOST_AUTO_TEST_CASE(testRANSAC)
{
  cout<<" -------------------------- Complex --------------------"<<endl;
  Complex c1(-1,0);
  Complex c2(-1,1);
  cout<<"sqrt("<<c1<<")="<<sqrt(c1)<<endl;
  cout<<"cubicrt("<<c1<<")="<<cubicrt(c1)<<endl;
  cout<<"c1+c2="<<c1<<"+"<<c2<<"="<<c1+c2<<endl;
  cout<<"c1-c2="<<c1<<"-"<<c2<<"="<<c1-c2<<endl;
  double r, theta; c2.toRadial(r,theta);
  cout<<"r theta(c2)"<<r<<" "<<theta<<endl;

  cout<<" -------------------------- 4Point Model --------------------"<<endl;
  double W=640, H=480;
  Matrix<2,2,double> K;
  K[0][0]=300; K[0][1]=0;
  K[1][0]=0; K[1][1]=300;
  Vector<2,double> t;
  t[0]=W/2.0; t[1]=H/2.0;

  SimpleCamera* simpleCam= new SimpleCamera(K,t);
  FourPoint<SimpleCamera,BriefData> fourP(*simpleCam);

  double p3[12]={-0.1022,   -0.0301,    4.1363,
                  -0.2414,   -0.1649,    5.0774,
                  0.3192,    0.6277,    3.7859,
                  0.3129,    1.0933,    3.8865}; // 3D points
  double p2[8]={299.2137,  241.6603,
                 289.9707,  243.2043,
                 380.2188,  250.2269,
                 415.6873,  280.7734}; // corresponding 2D points

  vector<MapPoint*> mapMPs;
  vector<MapPoint*> queryMPs;
  vector<Assoc<BriefData,uint32_t> > pairing;
  for (uint32_t i=0; i<4; ++i){
    mapMPs.push_back(new MapPoint());
    BriefData* bd_=new BriefData(mapMPs[mapMPs.size()-1]); // do not need descriptors so just Base BriefData
    mapMPs[mapMPs.size()-1]->v3WorldPos[0]=p3[i*3];
    mapMPs[mapMPs.size()-1]->v3WorldPos[1]=p3[i*3+1];
    mapMPs[mapMPs.size()-1]->v3WorldPos[2]=p3[i*3+2];

    queryMPs.push_back(new MapPoint());
    BriefData* bd=new BriefData(queryMPs[queryMPs.size()-1]);
    bd->v2p[0]=p2[i*2];
    bd->v2p[1]=p2[i*2+1];

    pairing.push_back(Assoc<BriefData,uint32_t>(queryMPs[queryMPs.size()-1]->pBData,
        mapMPs[mapMPs.size()-1]->pBData,uint32_t(1)));
  }
  // estimate the pose
  TooN::SE3<double>T;
  fourP.compute(pairing,T);
  // pose which was used in the maltab example
  Vector<6> se; se[0]=.1; se[1]=.1; se[2]=1; se[3]=0.0; se[4]=0.0; se[5]=.9;
  TooN::SE3<double> Tmatlab(se);
  cout<<"Tmatlab:"<<endl<<Tmatlab;
  cout<<"Testimated:"<<endl<<T;
  TooN::SE3<double> dT=T.inverse()*Tmatlab;
  cout<<"dT:"<<endl<<dT;
  cout<<"dAngle: "<<norm(dT.get_rotation().ln())<<endl;
  cout<<"|dTranslation|: "<<norm(dT.get_translation())<<endl;

  cout<<"Computing!"<<endl;
  TooN::SE3<double> TfourP;
  Timer t0;
  for(uint32_t i=0; i<10000;++i)
    fourP.compute(pairing,TfourP);
  t0.toc();
  cout<<"Time per iteration: "<<t0.lastDt()/10000.0<<"ms"<<endl;

  {
    for (uint32_t i=0; i<mapMPs.size(); ++i){
      delete mapMPs[i];
    }
    for (uint32_t i=0; i<queryMPs.size(); ++i){
      delete queryMPs[i]->pBData;
      delete queryMPs[i];
    }
  }
  cout<<" -------------------------- RANSAC --------------------"<<endl;

  uint32_t nTrials=1000;

  // load datapoints generate using matlab code they
  // contain 100 model inliers and about 50 outliers
  double p3w[450]={-1.352117, 0.206221, 4.567900, -0.348265, 0.506638, 5.164479, -1.907294, -0.912397, 5.510497, 1.582316, 0.091320, 6.642761, -0.643684, 1.718154, 4.384874, 0.695393, -0.551424, 4.371329, 0.667289, 0.106106, 4.823442, -0.654413, 0.177599, 6.161254, -1.527241, -0.917528, 4.601532, -1.531568, 0.362128, 5.928355, 0.807010, 0.211589, 4.264374, -0.119675, -2.377087, 4.144005, 1.062896, 2.215803, 6.813111, -0.467909, 1.375268, 5.860350, -2.927290, 1.210863, 5.567824, -1.085131, 0.857555, 5.006642, 0.795715, -0.342273, 4.400213, 0.207818, -1.199149, 6.175231, 1.870702, -0.469806, 6.131256, 0.346525, 0.502559, 3.238085, -1.793112, 1.910678, 3.848164, 2.482677, -1.002049, 4.631707, 1.072953, 1.867604, 6.484138, -1.459948, -1.052299, 5.391097, 0.220999, 0.803649, 6.307653, -0.044517, -0.072668, 4.422821, -0.757764, -1.952007, 5.477100, -1.813651, 2.499656, 4.378476, -0.946918, -1.206561, 3.124856, 0.274562, -0.707416, 5.307786, -0.555907, -0.450935, 5.039045, -0.857138, -0.375419, 4.238295, 0.049140, 0.212870, 4.450085, 2.605765, 0.329275, 4.220559, 0.245635, 2.092067, 5.520463, 0.769333, 1.421775, 3.959199, -0.541382, 0.963223, 5.591865, -1.557411, -0.657401, 4.708391, -1.127086, 1.074259, 4.763820, 0.542287, -0.198873, 4.123221, 0.048174, -0.288717, 4.163184, -0.047135, 0.545881, 4.327054, 0.860925, -1.195354, 4.080305, 2.081143, -2.405090, 4.293578, 0.962930, -0.413546, 4.357948, -0.334800, -0.843357, 3.480262, 0.301132, 0.853352, 3.254606, 0.941125, -0.262549, 1.871093, 0.070398, 1.439598, 5.545688, 1.473419, -0.524781, 4.025272, 1.236020, 0.626301, 5.221010, 0.599165, 0.490374, 4.605779, -1.556387, 0.392134, 5.837841, -1.196070, -0.969285, 5.379404, -1.008940, 0.060152, 6.479598, 1.047622, -0.126578, 5.238175, -0.025926, -0.577164, 5.538983, 1.901116, -0.305176, 4.621270, -0.120378, -0.483278, 4.085323, -0.010539, -0.310288, 3.275775, -0.224092, -0.861545, 3.628746, 1.283921, -1.220023, 6.760743, 1.053821, -0.645496, 3.701754, 0.186587, -0.289142, 5.512022, -0.500261, 1.000422, 5.068258, -0.375385, -0.588064, 5.689424, -0.363025, 1.557483, 4.776219, 0.681227, -1.361373, 4.726270, 1.013899, 1.900082, 5.630053, 1.645031, 0.177859, 4.683268, 1.038247, -2.166610, 5.241652, -1.077943, 0.706892, 6.416869, 1.006039, -2.225334, 5.619090, 0.126451, 0.341199, 4.405250, -0.709175, 2.251238, 4.723791, -0.200848, -0.166137, 6.416600, -0.144338, 0.487023, 3.215565, 0.001963, 0.672969, 5.318262, 0.141720, -0.374956, 6.546778, -0.135504, 0.820489, 5.011385, -0.444650, -0.374874, 5.198779, 1.232503, 0.878492, 5.966114, 1.447070, -0.998012, 7.307697, 0.545106, 0.070461, 5.955168, 0.069841, -0.290542, 4.434220, 1.422170, -0.778342, 5.005644, -0.368797, 0.088556, 4.314058, -0.301366, -1.473674, 5.010842, 0.056775, -1.639795, 2.560950, 0.996105, -1.453281, 3.993748, -0.101873, -0.803375, 5.559803, 0.549226, 0.842577, 5.478029, -0.100127, 0.049842, 3.669102, 0.223006, 1.247960, 5.512118, -1.978038, 0.987096, 5.200783, 1.396711, -0.481117, 6.044971, 1.006556, -1.360795, 5.199954, -1.060200, 0.027717, 4.057406, -2.474854, -0.347808, 4.103262, 1.656835, 1.224125, 3.762601, 0.059075, -0.733649, 5.238587, 0.933869, 1.579552, 5.845659, 0.592924, 0.254258, 4.574610, 0.413650, 0.464392, 4.676402, 1.173637, -0.715034, 4.451336, 0.475997, -1.015843, 2.799551, -1.704973, -0.176028, 3.736863, 0.679671, 0.021295, 4.583622, -0.340340, -1.460904, 5.326858, 0.193926, 0.110446, 4.155930, 0.219588, -0.768656, 3.785767, 0.343217, 0.421351, 3.893818, -0.557706, 0.976262, 5.796695, -0.571439, -1.890918, 5.277353, -1.074184, -0.725623, 5.143552, 1.097034, -0.271066, 5.780401, 0.093930, -2.251572, 5.857441, 0.453217, -2.594147, 4.374362, 1.034833, -1.693526, 3.277113, -1.156033, 0.895400, 3.542158, -1.134769, 1.618608, 5.900825, -0.176270, -0.637891, 5.470813, 0.690617, -0.451554, 3.606394, -0.868925, 0.177729, 4.585331, -0.751541, 0.814470, 4.935950, 0.534178, 0.879838, 5.118022, 0.314294, 2.505960, 4.938846, 0.557117, 0.472788, 4.168977, 0.692533, -1.167982, 6.103529, 1.044525, 2.318648, 4.500123, -1.736740, -0.997857, 4.050557, 0.144680, -0.704987, 3.038738, 0.368283, 0.907164, 3.724344, -1.701396, 0.175538, 7.756552, 0.093210, 0.068244, 4.402762, 1.067441, 0.005916, 6.483540, -1.520813, -1.339577, 4.479283, 0.042261, -1.285451, 6.021989, -0.576057, -1.676523, 4.405662, 0.706955, 0.755868, 4.288985, -1.122306, -0.895769, 5.354569, -1.130537, -1.734641, 5.159556, 1.294699, 0.476550, 5.694370, 0.482228, -0.253970, 4.495402, 1.369993, -1.303157, 5.558383, 0.867083, 0.290260, 4.300201, 0.615412, 0.439663, 5.824631, 0.120114, 0.503393, 5.663361, -1.321764, -0.610060, 5.296808, -0.006809, -0.353936, 3.942840};
  double p2c[300]={251.893330, 335.991922, 323.707828, 278.944404, 185.074329, 298.816889, 369.186155, 174.714340, 392.278728, 375.353136, 308.453862, 157.125705, 349.016596, 200.654944, 296.910425, 273.760913, 170.085231, 288.430547, 271.524438, 323.997767, 369.603486, 189.778565, 122.916015, 103.794241, 436.921405, 265.918244, 360.397440, 312.589976, 254.452213, 437.132464, 310.126244, 340.215737, 328.505854, 162.114754, 265.345991, 184.805859, 358.731422, 134.661677, 384.158490, 239.508782, 346.675162, 508.325881, 371.941134, 24.307745, 429.535871, 254.944686, 192.811656, 270.410045, 356.012786, 256.015539, 301.146181, 235.206193, 177.401562, 195.487621, 382.323659, 499.996374, 85.398762, 232.466878, 284.178910, 191.165943, 258.365677, 248.088548, 231.499592, 276.380714, 325.950520, 244.327348, 482.819925, 64.813181, 430.305192, 310.519147, 468.336012, 263.923914, 338.817501, 304.054865, 189.586410, 301.995818, 320.900809, 359.863148, 325.142003, 182.904673, 289.160057, 215.138442, 344.390681, 269.843857, 268.273333, 97.513817, 254.486961, -48.784317, 332.855887, 145.729128, 199.260932, 203.122117, 416.675301, 273.183203, 406.200642, -85.570242, 388.846765, 292.712249, 357.065580, 88.635972, 400.232874, 195.689345, 372.169473, 222.624762, 270.910827, 328.042370, 208.241695, 259.857856, 281.053251, 282.793668, 349.957190, 173.080612, 280.603333, 214.592309, 387.324604, 97.233072, 263.273966, 215.680640, 269.928769, 209.658060, 212.557160, 193.695156, 305.025125, 145.815921, 322.295392, 99.081664, 304.209968, 215.289501, 345.404846, 311.579116, 267.340273, 232.304909, 388.710993, 335.801081, 257.903341, 125.274502, 449.016286, 262.051787, 404.237097, 140.268642, 236.632544, 84.059920, 306.527770, 308.465168, 239.104171, 95.993984, 338.945554, 246.121087, 416.196761, 393.852757, 298.751084, 240.453632, 341.893864, 289.998486, 347.568362, 265.782446, 301.964937, 218.945802, 352.127094, 282.671071, 270.079094, 245.103435, 399.980197, 211.821150, 319.515221, 154.378399, 335.819856, 214.100777, 292.695070, 215.584005, 330.916145, 116.952487, 293.854756, 267.254913, 209.994249, 185.738678, 55.246056, 27.018648, 255.206971, 66.871283, 265.993622, 209.573290, 378.424650, 243.222676, 302.803943, 247.414204, 385.865025, 277.073149, 278.132480, 391.140442, 341.451569, 154.486438, 279.203649, 119.890786, 244.648340, 318.809772, 132.259024, 402.210050, 521.995040, 176.703085, 263.327613, 195.473328, 418.174254, 261.183246, 355.379441, 201.993573, 365.176502, 243.244803, 306.250207, 129.582085, 204.854000, 45.622582, 175.312417, 380.779239, 358.197886, 188.840393, 223.934546, 191.161136, 325.493336, 239.313587, 258.344699, 174.792911, 367.850890, 228.168656, 343.582614, 300.920407, 169.894988, 187.843815, 221.082883, 259.764802, 342.551699, 164.198664, 225.731095, 130.283094, 137.505242, 71.584711, 205.295093, -17.808199, 296.355839, 416.209003, 347.718913, 358.219280, 251.856643, 201.819082, 316.029265, 121.441156, 294.656631, 305.635649, 336.247570, 302.307763, 390.316671, 250.984344, 486.009788, 332.985226, 361.943235, 215.069655, 278.673881, 159.551530, 518.130050, 292.089815, 145.294575, 300.000317, 226.301531, 169.753628, 433.916286, 258.045118, 254.274708, 306.981185, 311.398672, 232.563217, 348.494358, 195.218562, 123.795639, 269.412035, 249.533075, 172.703392, 159.983676, 173.525004, 430.957916, 228.743295, 213.718154, 256.804337, 160.827991, 235.028551, 373.172563, 183.565153, 327.704579, 194.869259, 298.438963, 126.634523, 376.931721, 200.060268, 357.144394, 242.121425, 350.155533, 257.699271, 211.699157, 278.266987, 281.994455, 216.419640};

  // no errors
//  double p3w[450]={0.274734, -0.774063, 3.986004, -0.672732, -0.090828, 4.770079, 0.574249, -0.577424, 3.223356, -0.702348, -0.718552, 5.505545, 0.251299, -1.974379, 3.963647, 0.352413, -1.550093, 3.444391, 1.432881, -0.029375, 5.058540, -1.109454, -0.647092, 5.478398, 0.213759, 1.322283, 4.765469, -1.726407, -1.851206, 5.530902, 0.126833, -0.928690, 5.754179, 0.784311, 0.502759, 5.681867, -1.067183, 0.469004, 4.792080, -0.205144, -0.440212, 5.265347, 1.228617, -1.003431, 4.447730, 1.655789, -2.371246, 6.509694, 0.002049, -0.475825, 4.280027, 1.485826, 0.469541, 3.847441, -0.158553, -0.120967, 4.373823, -0.873935, -1.369195, 4.305738, -0.103841, 0.955756, 3.721451, -1.742601, 0.736965, 3.723055, -0.826254, -0.190366, 6.729337, -0.621224, 0.082204, 5.067133, 1.378428, 0.073650, 4.076233, 0.222555, 0.178381, 6.067108, 2.044142, 0.771842, 4.041554, 0.445134, -0.360322, 6.534237, 0.353637, 1.588991, 4.708371, -0.223733, -1.144742, 4.231346, -0.891541, -0.321951, 6.320300, 0.169471, -0.800874, 4.442295, -0.376139, -0.665742, 5.008944, -1.557253, -1.651936, 5.727161, 0.514937, 1.165737, 5.290381, -0.164991, 0.076282, 4.360951, 0.261998, -0.126919, 2.893707, -0.520396, 0.096215, 4.217895, 0.685396, -0.710756, 5.682497, -0.598538, -0.369954, 6.076417, 0.355786, 0.897374, 5.245634, 0.668192, -0.066568, 5.927113, -0.125351, 0.511022, 5.322814, -0.920369, 0.655365, 6.452253, 0.238640, 1.028160, 6.499132, 1.077193, -0.534972, 4.416685, -2.178038, -0.745260, 5.020161, 0.114005, 0.379446, 5.601276, 0.141137, -0.942830, 6.283325, 0.349953, 1.175594, 5.147652, -0.378676, -1.073338, 4.485167, 0.338181, 1.091615, 4.970096, -0.554088, 1.626449, 3.667025, 0.255297, -1.288496, 4.467799, 1.148139, 1.182114, 4.140466, -0.090769, 0.518985, 5.182305, -1.079222, 0.115658, 4.755868, -0.103371, -0.237965, 6.145664, 0.434096, -0.185702, 5.196432, -0.270224, 0.882919, 3.866465, 1.661280, -0.646701, 5.439261, -0.441169, -0.609796, 4.004788, -0.425077, 3.090314, 5.207316, 1.629666, 1.591496, 7.445259, 0.298641, 1.087255, 4.562358, 0.535309, 0.958008, 5.201666, 1.333635, -0.025374, 6.145812, -0.655184, -1.739550, 3.984908, -0.185701, -0.191028, 6.254323, 0.869491, 0.761438, 4.599172, -0.796660, 0.671557, 5.832695, 0.238862, 1.604435, 4.466203, -1.163413, 1.222163, 6.730710, 0.509317, 0.453827, 6.193197, 2.235659, -0.551727, 4.313873, -0.162538, -0.282671, 6.829210, -0.402267, 0.510618, 4.720561, 1.661085, -0.471008, 5.806608, -0.938005, -0.444757, 5.177877, -0.376592, 1.454372, 4.995128, -0.032790, -0.133781, 7.030995, 0.606995, -1.581238, 3.461383, -1.089043, -2.192751, 3.482554, -0.967776, 0.245193, 5.811881, 0.304441, -0.479060, 2.836436, -0.189141, -0.397420, 5.821655, -1.676007, -0.139620, 6.307016, -1.723599, 0.037233, 3.513598, -1.732125, -1.019104, 4.967474, 0.019810, -0.025347, 4.401237, 0.453133, -2.195664, 5.932679, 0.667068, -0.933874, 4.366732, -1.061988, -0.394165, 5.803789, -2.010839, 0.277388, 4.235695, 0.592231, 0.277814, 6.077399, -0.084205, 1.266756, 5.372814, -0.017747, 1.682323, 3.814112, -0.406095, 0.444960, 3.848904, -0.311564, -0.826575, 5.056649, 1.901755, 0.533260, 3.021951, -0.153850, 1.252692, 5.915747, 0.510788, 1.128251, 6.476459, -2.171298, 0.102479, 5.661348, -1.487341, -1.455604, 3.852526, -0.781704, -1.288715, 5.240486, 0.146793, -0.366105, 7.237706, 0.361658, 0.520620, 6.257680, 2.509786, -0.589407, 5.545798, -1.757334, -1.568829, 5.874114, -1.728147, 1.320990, 6.343415, -0.281181, -0.452561, 5.192075, -0.869425, 1.000374, 4.893484, -1.038585, 0.437104, 4.730223, 0.952894, -1.305257, 5.161532, -0.426678, 0.055143, 4.767722, 0.468522, 0.673866, 4.235884, 0.203445, -0.685732, 4.070342, -1.600655, -0.694317, 5.607867, 0.765861, 0.320326, 4.434889, -0.256306, -1.037847, 4.058821, -0.662155, -0.681691, 3.628663, -0.153187, 1.325809, 3.626435, 0.393345, -0.343829, 5.686609, 1.104959, 0.454658, 4.635945, 0.102090, -0.488813, 5.619051, -1.724679, -1.543662, 6.215405, 0.834327, -0.478443, 4.733170, -0.546478, -0.561535, 5.725452, 1.845205, 0.201081, 7.895952, 0.610034, -0.503047, 4.664633, 0.654147, 1.010392, 5.447610, -0.341027, -2.055807, 4.694527, -0.843250, 0.388990, 6.116948, -0.729900, -0.532222, 4.599777, -1.296614, 0.964597, 4.582847, -0.823677, 0.068244, 5.662979, 1.181927, 1.631855, 4.978247, -0.598259, -0.408516, 4.315363, -0.059572, -0.317511, 2.833183, 1.557385, 0.475253, 3.592130, -0.498710, 1.053485, 4.459343, -0.201447, -1.207935, 5.788313, 0.691337, -2.650046, 5.698927, 0.199411, -0.190414, 5.546187, 0.462602, 0.248910, 6.027824, -0.378359, 1.523187, 4.800629, -0.176894, -0.260697, 5.381571, 1.619901, 0.091814, 4.938146, 2.021491, 0.670473, 5.449231, -0.034359, -0.618476, 4.814500};
//  double p2c[300]={263.373950, 165.359839, 271.027320, 273.832999, 289.593840, 124.687958, 244.853347, 244.026434, 166.096438, 91.326175, 181.938820, 82.436514, 374.541032, 152.277857, 231.417253, 268.285811, 402.955155, 288.656107, 144.404941, 250.505465, 270.913432, 194.518168, 368.048522, 217.653024, 286.448468, 325.603424, 277.657903, 228.929979, 306.565521, 98.031890, 267.768318, 86.717059, 274.223034, 208.532211, 442.450418, 143.363371, 291.385178, 240.294134, 161.517307, 220.796601, 381.235304, 309.534609, 250.106456, 435.804439, 278.454192, 265.271151, 286.806434, 276.372920, 396.634327, 134.878450, 328.888968, 233.562184, 492.248949, 125.172450, 312.846153, 206.473138, 427.848364, 293.816751, 211.867051, 185.830179, 267.381566, 265.699512, 263.256368, 181.083562, 253.894226, 227.786680, 168.241360, 249.335992, 397.233130, 259.504490, 304.511857, 251.924408, 309.418051, 187.777775, 284.892082, 279.495903, 303.269681, 174.395141, 273.176876, 251.304200, 376.290692, 256.495446, 334.258706, 203.083000, 333.448942, 265.734366, 309.737334, 299.632683, 364.867197, 262.287212, 330.665226, 132.752824, 165.847147, 329.408628, 335.528975, 246.501653, 275.780998, 197.967635, 393.025217, 269.783151, 216.244821, 204.216844, 390.725033, 268.001074, 410.164144, 397.447923, 235.320078, 149.459583, 464.231369, 219.970305, 335.875541, 264.957064, 263.197785, 309.753754, 297.815926, 233.475976, 319.722017, 204.230368, 361.296374, 314.920200, 346.884348, 121.793318, 232.077124, 232.226333, 464.598705, 397.355588, 419.285232, 224.430444, 396.680479, 273.360243, 388.101576, 249.476097, 359.510712, 175.599541, 129.214908, 178.434677, 297.422935, 239.002166, 403.909685, 218.960757, 313.846174, 301.878728, 430.373232, 306.272248, 325.451925, 325.037716, 351.147997, 230.697250, 395.171800, 46.285537, 296.905468, 235.175518, 321.599802, 287.381643, 353.320392, 137.775947, 243.759890, 269.691124, 378.305451, 326.672327, 307.381155, 234.860624, 199.140459, 56.797541, 14.935563, 173.049068, 286.390274, 294.046894, 268.698196, 145.011824, 285.223831, 231.159440, 247.659394, 306.768874, 180.216096, 398.458963, 168.566926, 291.246732, 308.060635, 233.224450, 224.822319, 132.697108, 279.952206, 137.683917, 251.556274, 273.808519, 212.222215, 397.900805, 347.129292, 220.208980, 375.641057, 295.512061, 445.600952, 348.150087, 316.568625, 297.884540, 248.319112, 216.785974, 538.080183, 61.423245, 366.048128, 292.140471, 378.508408, 254.024169, 230.099294, 350.711929, 89.415118, 262.637806, 205.019809, 223.280109, 304.651487, 221.389813, 348.838627, 239.787239, 383.932186, 83.074301, 168.928623, 261.834042, 310.494768, 359.511978, 272.957562, 232.456124, 328.740750, 336.804462, 285.312517, 323.654541, 279.721730, 124.491949, 292.031215, 265.830927, 383.994406, 240.642839, 267.153333, 178.387254, 211.498737, 290.562718, 372.260773, 201.128189, 212.313448, 191.933399, 197.331459, 245.657040, 412.851805, 342.720852, 310.180861, 203.679198, 395.402518, 188.180654, 290.839139, 212.063897, 181.280186, 259.836107, 321.256751, 159.962358, 262.346837, 242.089828, 370.919020, 180.604995, 308.280256, 171.713406, 391.924754, 244.796231, 161.557045, 154.275005, 299.554143, 290.459641, 236.570978, 256.348057, 305.016505, 371.285729, 282.237912, 281.490853, 462.035913, 243.254883, 245.567031, 255.386275, 252.217602, 207.848469, 460.052864, 127.733481, 353.496321, 326.878544, 244.841260, 200.015805, 206.579776, 97.388558, 309.873033, 218.840274, 341.112983, 224.952692, 385.559852, 334.735789, 289.464994, 235.420767, 392.287931, 144.125823, 431.376562, 158.249913, 270.097582, 208.320578};

  cout<<"Loading Datapoints"<<endl;
  mapMPs.clear(); queryMPs.clear(); pairing.clear();
  for (uint32_t i=0; i<150; ++i){
    mapMPs.push_back(new MapPoint());
    BriefData* bd_=new BriefData(mapMPs[mapMPs.size()-1]);
    mapMPs[mapMPs.size()-1]->v3WorldPos[0]=p3w[i*3];
    mapMPs[mapMPs.size()-1]->v3WorldPos[1]=p3w[i*3+1];
    mapMPs[mapMPs.size()-1]->v3WorldPos[2]=p3w[i*3+2];

    queryMPs.push_back(new MapPoint());
    BriefData* bd=new BriefData(queryMPs[queryMPs.size()-1]);
    bd->v2p[0]=p2c[i*2];
    bd->v2p[1]=p2c[i*2+1];

    pairing.push_back(Assoc<BriefData,uint32_t>(queryMPs[queryMPs.size()-1]->pBData,
        mapMPs[mapMPs.size()-1]->pBData,uint32_t(1)));
  }

  vector<Assoc<BriefData,uint32_t> > cs;
  fourP.consensusSet(Tmatlab.inverse(),pairing,cs);
  cout<<"Consensus set size="<<cs.size()<<endl;

  cout<<"Running RANSAC"<<endl;
  Random rnd(time(NULL));
#ifdef PROSAC
  Prosac<FourPoint<SimpleCamera,BriefData>, BriefData> ransac(rnd,fourP,RansacParams(10,nTrials));
#else
  Ransac<FourPoint<SimpleCamera,BriefData>, BriefData> ransac(rnd,fourP,RansacParams(10,nTrials));
#endif
  Timer t1;
  T=ransac.find(pairing);
  t1.toc();
  cout<<"Ransac dt: "<<t1<<endl;

  cout<<"Tmatlab:"<<endl<<Tmatlab;
  cout<<"Testimated:"<<endl<<T;
  dT=T.inverse()*Tmatlab;
  cout<<"dT:"<<endl<<dT;
  cout<<"dAngle: "<<norm(dT.get_rotation().ln())*180.0/M_PI<<" Deg"<<endl;
  cout<<"|dTranslation|: "<<norm(dT.get_translation())<<endl;
  {
    for (uint32_t i=0; i<mapMPs.size(); ++i){
      delete mapMPs[i];
    }
    for (uint32_t i=0; i<queryMPs.size(); ++i){
      delete queryMPs[i]->pBData;
      delete queryMPs[i];
    }
  }
  cout<<" ------------------------ ATAN camera RANSAC "<<endl;
  // load camera parameters
  GUI.LoadFile("settings.cfg");
  Vector<NUMTRACKERCAMPARAMETERS> vTest = GV3::get<Vector<NUMTRACKERCAMPARAMETERS> >("Camera.Parameters",
      ATANCamera::mvDefaultParams, HIDDEN);
  ATANCamera* pCamModel = new ATANCamera("Camera");
  if (vTest == ATANCamera::mvDefaultParams){
    cout << "! Camera.Parameters is not set, put the Camera.Parameters= line into the appropriate .cfg file." << endl;
    exit(1);
  }
  cout<<"Projecting Datapoints"<<endl;
  mapMPs.clear(); queryMPs.clear(); pairing.clear();
  for (uint32_t i=0; i<150; ++i){
    mapMPs.push_back(new MapPoint());
    BriefData* bd_=new BriefData(mapMPs[mapMPs.size()-1]);
    mapMPs[mapMPs.size()-1]->v3WorldPos[0]=p3w[i*3];
    mapMPs[mapMPs.size()-1]->v3WorldPos[1]=p3w[i*3+1];
    mapMPs[mapMPs.size()-1]->v3WorldPos[2]=p3w[i*3+2];

    queryMPs.push_back(new MapPoint());
    BriefData* bd=new BriefData(queryMPs[queryMPs.size()-1]);
    Vector<3,double> pC=Tmatlab.inverse()*mapMPs[mapMPs.size()-1]->v3WorldPos; // camera coords
    Vector<2,double> pc=pC.slice(0,2)/pC[2]; // camframe
    // compute error from the data obtained form matlab
    Vector<2,double> piErr=simpleCam->Project(pc);
    piErr[0]-=p2c[i*2]; piErr[1]-=p2c[i*2+1];
    //    cout<<piErr<<endl;
    // and add the error to the projection with the ATANCamera
    bd->v2p=pCamModel->Project(pc)+piErr;

    pairing.push_back(Assoc<BriefData,uint32_t>(queryMPs[queryMPs.size()-1]->pBData,
        mapMPs[mapMPs.size()-1]->pBData,i<=100?rnd(50):100));
  }

  cout<<"Running RANSAC"<<endl;
  FourPoint<ATANCamera,BriefData> fourPATAN(*pCamModel);
#ifdef PROSAC
  Prosac<FourPoint<ATANCamera,BriefData> ,BriefData> ransacATAN(rnd,fourPATAN,RansacParams(10,nTrials));
#else
  Ransac<FourPoint<ATANCamera,BriefData> ,BriefData> ransacATAN(rnd,fourPATAN,RansacParams(10,nTrials));
#endif
  Timer t2;
  T=ransacATAN.findAmongBest(pairing,50);
  t2.toc();
  cout<<"Ransac dt: "<<t2<<endl;
  cout<<"Tmatlab:"<<endl<<Tmatlab;
  cout<<"Testimated:"<<endl<<T;
  dT=T.inverse()*Tmatlab;
  cout<<"dT:"<<endl<<dT;
  cout<<"dAngle: "<<norm(dT.get_rotation().ln())*180.0/M_PI<<" Deg"<<endl;
  cout<<"|dTranslation|: "<<norm(dT.get_translation())<<endl;

  cout<<" ------------------------ ATAN camera Projection errors"<<endl;

  Vector<3,double> p0; p0[0]=0.0; p0[1]=0.0; p0[2]=1.0; // straight
  Vector<3,double> p1; p1[0]=0.05; p1[1]=0.0; p1[2]=1.0; // slightly off by 5cm
  Vector<2,double> z0=p0.slice(0,2)/p0[2]; // camera plane
  Vector<2,double> z1=p1.slice(0,2)/p1[2]; // camera plane
  Vector<2,double> pi0=pCamModel->Project(z0); // image plane
  Vector<2,double> pi1=pCamModel->Project(z1); // image plane

  cout<<"Projected:\t"<<endl<<p0<<endl<<p1<<endl;
  cout<<"dp="<<norm(p0-p1)<<"m"<<endl;
  cout<<"to camera plane:\t"<<endl<<z0<<endl<<z1<<endl;
  cout<<"dz="<<norm(z0-z1)<<""<<endl;
  cout<<"to image plane:\t"<<endl<<pi0<<endl<<pi1<<endl;
  cout<<"dpi="<<norm(pi0-pi1)<<"px"<<endl;

  cout<<"--"<<endl;
  p0[0]=0.0; p0[1]=0.0; p0[2]=1.0; // straight
  p1[0]=0.025; p1[1]=0.0; p1[2]=1.0; // slightly off by 5cm
  z0=p0.slice(0,2)/p0[2]; // camera plane
  z1=p1.slice(0,2)/p1[2]; // camera plane
  pi0=pCamModel->Project(z0); // image plane
  pi1=pCamModel->Project(z1); // image plane

  cout<<"Projected:\t"<<endl<<p0<<endl<<p1<<endl;
  cout<<"dp="<<norm(p0-p1)<<"m"<<endl;
  cout<<"to camera plane:\t"<<endl<<z0<<endl<<z1<<endl;
  cout<<"dz="<<norm(z0-z1)<<""<<endl;
  cout<<"to image plane:\t"<<endl<<pi0<<endl<<pi1<<endl;
  cout<<"dpi="<<norm(pi0-pi1)<<"px"<<endl;

  cout<<"--"<<endl;
  p0[0]=0.0; p0[1]=0.0; p0[2]=1.0; // straight
  p1[0]=0.01; p1[1]=0.0; p1[2]=1.0; // slightly off by 5cm
  z0=p0.slice(0,2)/p0[2]; // camera plane
  z1=p1.slice(0,2)/p1[2]; // camera plane
  pi0=pCamModel->Project(z0); // image plane
  pi1=pCamModel->Project(z1); // image plane

  cout<<"Projected:\t"<<endl<<p0<<endl<<p1<<endl;
  cout<<"dp="<<norm(p0-p1)<<"m"<<endl;
  cout<<"to camera plane:\t"<<endl<<z0<<endl<<z1<<endl;
  cout<<"dz="<<norm(z0-z1)<<""<<endl;
  cout<<"to image plane:\t"<<endl<<pi0<<endl<<pi1<<endl;
  cout<<"dpi="<<norm(pi0-pi1)<<"px"<<endl;

  cout<<"--"<<endl;
  p0[0]=0.0; p0[1]=0.0; p0[2]=2.0; // straight
  p1[0]=0.05; p1[1]=0.0; p1[2]=2.0; // slightly off by 5cm
  z0=p0.slice(0,2)/p0[2]; // camera plane
  z1=p1.slice(0,2)/p1[2]; // camera plane
  pi0=pCamModel->Project(z0); // image plane
  pi1=pCamModel->Project(z1); // image plane

  cout<<"Projected:\t"<<endl<<p0<<endl<<p1<<endl;
  cout<<"dp="<<norm(p0-p1)<<"m"<<endl;
  cout<<"to camera plane:\t"<<endl<<z0<<endl<<z1<<endl;
  cout<<"dz="<<norm(z0-z1)<<""<<endl;
  cout<<"to image plane:\t"<<endl<<pi0<<endl<<pi1<<endl;
  cout<<"dpi="<<norm(pi0-pi1)<<"px"<<endl;

  p0[0]=0.0; p0[1]=0.0; p0[2]=2.0; // straight
  p1[0]=0.025; p1[1]=0.0; p1[2]=2.0; // slightly off by 5cm
  z0=p0.slice(0,2)/p0[2]; // camera plane
  z1=p1.slice(0,2)/p1[2]; // camera plane
  pi0=pCamModel->Project(z0); // image plane
  pi1=pCamModel->Project(z1); // image plane

  cout<<"Projected:\t"<<endl<<p0<<endl<<p1<<endl;
  cout<<"dp="<<norm(p0-p1)<<"m"<<endl;
  cout<<"to camera plane:\t"<<endl<<z0<<endl<<z1<<endl;
  cout<<"dz="<<norm(z0-z1)<<""<<endl;
  cout<<"to image plane:\t"<<endl<<pi0<<endl<<pi1<<endl;
  cout<<"dpi="<<norm(pi0-pi1)<<"px"<<endl;

  cout<<"--"<<endl;
  p0[0]=0.0; p0[1]=0.0; p0[2]=2.0; // straight
  p1[0]=0.01; p1[1]=0.0; p1[2]=2.0; // slightly off by 5cm
  z0=p0.slice(0,2)/p0[2]; // camera plane
  z1=p1.slice(0,2)/p1[2]; // camera plane
  pi0=pCamModel->Project(z0); // image plane
  pi1=pCamModel->Project(z1); // image plane

  cout<<"Projected:\t"<<endl<<p0<<endl<<p1<<endl;
  cout<<"dp="<<norm(p0-p1)<<"m"<<endl;
  cout<<"to camera plane:\t"<<endl<<z0<<endl<<z1<<endl;
  cout<<"dz="<<norm(z0-z1)<<""<<endl;
  cout<<"to image plane:\t"<<endl<<pi0<<endl<<pi1<<endl;
  cout<<"dpi="<<norm(pi0-pi1)<<"px"<<endl;

  {
    for (uint32_t i=0; i<mapMPs.size(); ++i){
      delete mapMPs[i];
    }
    for (uint32_t i=0; i<queryMPs.size(); ++i){
      delete queryMPs[i]->pBData;
      delete queryMPs[i];
    }
  }
  delete simpleCam;
}
